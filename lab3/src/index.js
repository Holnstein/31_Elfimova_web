function getRandomInt(maxWords) {
    return Math.floor(Math.random()*(maxWords));
}

function isWordValid(word) {
    if(/^[–∞-—è—ë]+$/i.test(word) === true || word === "chill"){
        return true;
    }
    // return [...word].every(letter => alphabet_ru.includes(letter));
}

function updateUsedLetters(word) {
    let wordAndRightLetter = "";

    for (let i = 0; i < word.length; i++) {
        if (!userUsedLetter.includes(word[i])) {
            userUsedLetter += word[i];
        }
        
        if(word[i] === randomWord[i]){
            wordAndRightLetter += `‚úÖ`;
            // wordAndRightLetter += `–ë—É–∫–≤–∞ ${word[i].toUpperCase()} —É–≥–∞–¥–∞–Ω–∞. –û–Ω–∞ –Ω–∞ ${i+1} –º–µ—Å—Ç–µ.\n`;
        }
        else if(randomWord.includes(word[i])){
            wordAndRightLetter += `üü®`;
            // wordAndRightLetter = `–ë—É–∫–≤–∞ ${word[i].toUpperCase()} –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç—É—Ç–æ—á–∫–∏. –ü—Ä–æ–±—É–π –µ—â–µ.\n`;
        }
        else{
            wordAndRightLetter += `üü•`;
        }
    }
    word = word.charAt(0).toUpperCase() + word.slice(1);
    wordAndRightLetter = `${word}.${wordAndRightLetter}`;
    return wordAndRightLetter;
}


const wordGuess = ["—Å–º–æ–ª–∞", "–∫–∞–ø–æ—Ç", "—Å—Ç–µ–Ω–∞", "–ª–∞—Å–∫–∞", "–ø–æ—Ä–∫–∞", "–∫—É—Ä–æ–∫", "chill", "—à–ª—è–ø–∞", "–¥–≤–µ—Ä—å", "–¥—Ä–µ–ª—å", "–±—Ä–∞–Ω—å", "–∫—Ä–∞–∂–∞", "—Å—Ç–∞–ª—å", "—Ü–∏–Ω–≥–∞", "—Å–∞—á–æ–∫", "—É–¥–∞—á–∞", ];

// let alphabet_ru = "–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è";
let userUsedLetter = "";
var randomWord = wordGuess[getRandomInt(wordGuess.length)];

let wordsAndRightLetter = [];
console.log("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: " + randomWord);
console.log("–ü—Ä–∏–≤–µ—Ç–∏–∫–∏");


var maxAttemptToGuess = 7;
var countAttempts = 0;

let word;

async function checkWord() {
    strReload = "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É? –ù–∞–∂–º–∏—Ç–µ –û–ö –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏, –∏–ª–∏ –û—Ç–º–µ–Ω–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞—Ç—å—Å—è.";
    while (countAttempts < maxAttemptToGuess) {
        word = prompt("–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤:")?.trim().toLowerCase();

        if (!word) {
            alert("–í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–ª–æ–≤–æ!");
            continue;
        }
        
        if(word.length !== 5 || !isWordValid(word)){
            alert("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤. –ù—É, –∏ —Ç–æ–ª—å–∫–æ –±—É–∫–æ–≤–∫–∏ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞");
            continue;
        }        

        const checkWordExist = await checkWordAPI(word);
        console.log("Check Word Exist:", checkWordExist);

        if(!checkWordExist){
            alert("//–ù–æ—Ä–º —Å–ª–æ–≤–æ –Ω–∞–ø–∏—à–∏—Ç–µ//");
            continue;
        }

        alert("–§—É—Ö, —Ö–æ—Ç—è –±—ã —Å–ª–æ–≤–æ –Ω–æ—Ä–º –Ω–∞–ø–∏—Å–∞–ª–∏. –î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º, —É–≥–∞–¥–∞–ª–∏ –ª–∏ –í—ã...");
        countAttempts++;
        
        if (word === randomWord) {
            attemptStr = countAttempts === 1 ? "–ø–æ–ø—ã—Ç–∫—É" : (countAttempts > 1 && countAttempts <= 4) ? "–ø–æ–ø—ã—Ç–∫–∏" : "–ø–æ–ø—ã—Ç–æ–∫";
            
            if(word === "chill"){   //–ª—É—á—à–∏–π —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã –ø–æ—Ç—ã–∫–∞—Ç—å—Å—è –¥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –ª–æ–≥–∞—Ö console
                playChillGuy("–í–æ—Ç —ç—Ç–æ —Ñ–∏—á–∞! –ú–æ–∂–µ—Ç–µ –ø–æ—á–∏–ª–ª–∏—Ç—å. üí•üí£üöÄ", true);
                return;
            }
            else{
                alert(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ "${word}" –∑–∞ ${countAttempts} ${attemptStr}!`);
                const reloadGame = confirm(strReload);
                if (reloadGame) {
                    location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
                }
                return;
            }
            
        } else{
            wordsAndRightLetter.push(updateUsedLetters(word));
            let sortedUserUsedLetter = [...userUsedLetter].sort();
            alert(`‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: ${maxAttemptToGuess - countAttempts}\n–í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª–æ–≤–∞:\n${wordsAndRightLetter.join("\n")}` +
                `\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: ${sortedUserUsedLetter.join(' ')}`);
        }

    }
    if(randomWord !== "chill"){
        alert(`–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏„Öú„Öú„Öú –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ: "${randomWord}"`);
        const reloadGame = confirm(strReload);
        if (reloadGame) {
            location.reload(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É
        }
    }
}

// –Ω–µ —Å—Ç–æ–∏—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ —Å–µ—Ç–∏ muctr –∏ —Ç–¥ –±–µ–∑ vpn, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–æ—á–∫—É –Ω–∞ —Å–ª–æ–≤–æ

async function checkWordAPI(word) {
    const apiKey = "LYKdPvanryooYqgB";
    const url = `https://api.textgears.com/spelling?text=${encodeURIComponent(word)}&language=ru-RU&whitelist=chill&key=${apiKey}`;  

    try {
        const response = await fetchWithTimeout(url, {}, 1000);     // —Å–≤–æ–π —Ç–∞–π–º-–∞—É—Ç, –µ—Å–ª–∏ –∞–ø–∏—à–∫–∞ –Ω–µ –≤–æ—Ä–∫–∞–µ—Ç
        if (!response.ok) {
            console.error("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞:", response.statusText);
            return true;
        }

        const data = await response.json();

        console.log("API Response:", data);

        if (data.status && data.response) {
            const hasSpellingError = data.response.errors.some(error => 
                error.description?.en === "–í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π–¥–µ–Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞."
            );
            console.log("Has Spelling Error:", hasSpellingError);
            return !hasSpellingError;
        } 
        else {
            console.error("–û—à–∏–±–∫–∞ API:", data.description);
            return true;
        }
        //     if (hasSpellingError) {
        //         alert("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ—Ä–º —Å–ª–æ–≤–æ..");
        //     } else {
        //         alert("–ï—Å—Ç—å —Ç–∞–∫–æ–µ.");
        //     }
        // } else {
        //     alert("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.");
        // }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API:", error);
        return true;
    }
}    

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetch —Å —Ç–∞–π–º–∞—É—Ç–æ–º
async function fetchWithTimeout(url, options = {}, timeout = 5000) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —Å –æ—à–∏–±–∫–æ–π –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞
    const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => {
            reject(new Error("Request timed out"));
        }, timeout);
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º fetch –∏ —Å–æ—Ä–µ–≤–Ω—É–µ–º—Å—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    return Promise.race([fetch(url, options), timeoutPromise]);
}

function playChillGuy(message, playSound = false) {
    if (playSound) {
        let audio = document.getElementById("chillAlert");
        audio.currentTime = 0; // –°–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
        audio.play().catch(error => console.log("–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:", error));
    }

    let modal = document.getElementById("modal");
    let modalMessage = document.getElementById("modalMessage");

    modalMessage.innerText = message;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    modal.style.display = "block"; 
    setVolume();
    document.getElementById("volumeSlider").addEventListener("input", setVolume);
}

function closeModal() {
    let modal = document.getElementById("modal");
    modal.style.display = "none";  // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
document.getElementById('checkButton').addEventListener('click', checkWord);


function setVolume() {
    let volumeSlider = document.getElementById("volumeSlider");
    let volumeValue = document.getElementById("volumeValue");
    let audio = document.getElementById("chillAlert");

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å
    audio.volume = volumeSlider.value;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
    volumeValue.innerText = `–ì—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(volumeSlider.value * 100)}%`;
}